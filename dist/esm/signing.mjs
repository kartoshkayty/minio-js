/*
 * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 MinIO, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as crypto from "crypto";
import * as errors from "./errors.mjs";
import { PRESIGN_EXPIRY_DAYS_MAX } from "./helpers.mjs";
import { getScope, isNumber, isObject, isString, makeDateLong, makeDateShort, uriEscape } from "./internal/helper.mjs";
const signV4Algorithm = 'AWS4-HMAC-SHA256';

// getCanonicalRequest generate a canonical request of style.
//
// canonicalRequest =
//  <HTTPMethod>\n
//  <CanonicalURI>\n
//  <CanonicalQueryString>\n
//  <CanonicalHeaders>\n
//  <SignedHeaders>\n
//  <HashedPayload>
//
function getCanonicalRequest(method, path, headers, signedHeaders, hashedPayload) {
  if (!isString(method)) {
    throw new TypeError('method should be of type "string"');
  }
  if (!isString(path)) {
    throw new TypeError('path should be of type "string"');
  }
  if (!isObject(headers)) {
    throw new TypeError('headers should be of type "object"');
  }
  if (!Array.isArray(signedHeaders)) {
    throw new TypeError('signedHeaders should be of type "array"');
  }
  if (!isString(hashedPayload)) {
    throw new TypeError('hashedPayload should be of type "string"');
  }
  const headersArray = signedHeaders.reduce((acc, i) => {
    // Trim spaces from the value (required by V4 spec)
    const val = `${headers[i]}`.replace(/ +/g, ' ');
    acc.push(`${i.toLowerCase()}:${val}`);
    return acc;
  }, []);
  const requestResource = path.split('?')[0];
  let requestQuery = path.split('?')[1];
  if (!requestQuery) {
    requestQuery = '';
  }
  if (requestQuery) {
    requestQuery = requestQuery.split('&').sort().map(element => !element.includes('=') ? element + '=' : element).join('&');
  }
  return [method.toUpperCase(), requestResource, requestQuery, headersArray.join('\n') + '\n', signedHeaders.join(';').toLowerCase(), hashedPayload].join('\n');
}

// generate a credential string
function getCredential(accessKey, region, requestDate, serviceName = 's3') {
  if (!isString(accessKey)) {
    throw new TypeError('accessKey should be of type "string"');
  }
  if (!isString(region)) {
    throw new TypeError('region should be of type "string"');
  }
  if (!isObject(requestDate)) {
    throw new TypeError('requestDate should be of type "object"');
  }
  return `${accessKey}/${getScope(region, requestDate, serviceName)}`;
}

// Returns signed headers array - alphabetically sorted
function getSignedHeaders(headers) {
  if (!isObject(headers)) {
    throw new TypeError('request should be of type "object"');
  }
  // Excerpts from @lsegal - https://github.com/aws/aws-sdk-js/issues/659#issuecomment-120477258
  //
  //  User-Agent:
  //
  //      This is ignored from signing because signing this causes problems with generating pre-signed URLs
  //      (that are executed by other agents) or when customers pass requests through proxies, which may
  //      modify the user-agent.
  //
  //  Content-Length:
  //
  //      This is ignored from signing because generating a pre-signed URL should not provide a content-length
  //      constraint, specifically when vending a S3 pre-signed PUT URL. The corollary to this is that when
  //      sending regular requests (non-pre-signed), the signature contains a checksum of the body, which
  //      implicitly validates the payload length (since changing the number of bytes would change the checksum)
  //      and therefore this header is not valuable in the signature.
  //
  //  Content-Type:
  //
  //      Signing this header causes quite a number of problems in browser environments, where browsers
  //      like to modify and normalize the content-type header in different ways. There is more information
  //      on this in https://github.com/aws/aws-sdk-js/issues/244. Avoiding this field simplifies logic
  //      and reduces the possibility of future bugs
  //
  //  Authorization:
  //
  //      Is skipped for obvious reasons

  const ignoredHeaders = ['authorization', 'content-length', 'content-type', 'user-agent'];
  return Object.keys(headers).filter(header => !ignoredHeaders.includes(header)).sort();
}

// returns the key used for calculating signature
function getSigningKey(date, region, secretKey, serviceName = 's3') {
  if (!isObject(date)) {
    throw new TypeError('date should be of type "object"');
  }
  if (!isString(region)) {
    throw new TypeError('region should be of type "string"');
  }
  if (!isString(secretKey)) {
    throw new TypeError('secretKey should be of type "string"');
  }
  const dateLine = makeDateShort(date);
  const hmac1 = crypto.createHmac('sha256', 'AWS4' + secretKey).update(dateLine).digest(),
    hmac2 = crypto.createHmac('sha256', hmac1).update(region).digest(),
    hmac3 = crypto.createHmac('sha256', hmac2).update(serviceName).digest();
  return crypto.createHmac('sha256', hmac3).update('aws4_request').digest();
}

// returns the string that needs to be signed
function getStringToSign(canonicalRequest, requestDate, region, serviceName = 's3') {
  if (!isString(canonicalRequest)) {
    throw new TypeError('canonicalRequest should be of type "string"');
  }
  if (!isObject(requestDate)) {
    throw new TypeError('requestDate should be of type "object"');
  }
  if (!isString(region)) {
    throw new TypeError('region should be of type "string"');
  }
  const hash = crypto.createHash('sha256').update(canonicalRequest).digest('hex');
  const scope = getScope(region, requestDate, serviceName);
  const stringToSign = [signV4Algorithm, makeDateLong(requestDate), scope, hash];
  return stringToSign.join('\n');
}

// calculate the signature of the POST policy
export function postPresignSignatureV4(region, date, secretKey, policyBase64) {
  if (!isString(region)) {
    throw new TypeError('region should be of type "string"');
  }
  if (!isObject(date)) {
    throw new TypeError('date should be of type "object"');
  }
  if (!isString(secretKey)) {
    throw new TypeError('secretKey should be of type "string"');
  }
  if (!isString(policyBase64)) {
    throw new TypeError('policyBase64 should be of type "string"');
  }
  const signingKey = getSigningKey(date, region, secretKey);
  return crypto.createHmac('sha256', signingKey).update(policyBase64).digest('hex').toLowerCase();
}

// Returns the authorization header
export function signV4(request, accessKey, secretKey, region, requestDate, sha256sum, serviceName = 's3') {
  if (!isObject(request)) {
    throw new TypeError('request should be of type "object"');
  }
  if (!isString(accessKey)) {
    throw new TypeError('accessKey should be of type "string"');
  }
  if (!isString(secretKey)) {
    throw new TypeError('secretKey should be of type "string"');
  }
  if (!isString(region)) {
    throw new TypeError('region should be of type "string"');
  }
  if (!accessKey) {
    throw new errors.AccessKeyRequiredError('accessKey is required for signing');
  }
  if (!secretKey) {
    throw new errors.SecretKeyRequiredError('secretKey is required for signing');
  }
  const signedHeaders = getSignedHeaders(request.headers);
  const canonicalRequest = getCanonicalRequest(request.method, request.path, request.headers, signedHeaders, sha256sum);
  const serviceIdentifier = serviceName || 's3';
  const stringToSign = getStringToSign(canonicalRequest, requestDate, region, serviceIdentifier);
  const signingKey = getSigningKey(requestDate, region, secretKey, serviceIdentifier);
  const credential = getCredential(accessKey, region, requestDate, serviceIdentifier);
  const signature = crypto.createHmac('sha256', signingKey).update(stringToSign).digest('hex').toLowerCase();
  return `${signV4Algorithm} Credential=${credential}, SignedHeaders=${signedHeaders.join(';').toLowerCase()}, Signature=${signature}`;
}
export function signV4ByServiceName(request, accessKey, secretKey, region, requestDate, contentSha256, serviceName = 's3') {
  return signV4(request, accessKey, secretKey, region, requestDate, contentSha256, serviceName);
}

// returns a presigned URL string
export function presignSignatureV4(request, accessKey, secretKey, sessionToken, region, requestDate, expires) {
  if (!isObject(request)) {
    throw new TypeError('request should be of type "object"');
  }
  if (!isString(accessKey)) {
    throw new TypeError('accessKey should be of type "string"');
  }
  if (!isString(secretKey)) {
    throw new TypeError('secretKey should be of type "string"');
  }
  if (!isString(region)) {
    throw new TypeError('region should be of type "string"');
  }
  if (!accessKey) {
    throw new errors.AccessKeyRequiredError('accessKey is required for presigning');
  }
  if (!secretKey) {
    throw new errors.SecretKeyRequiredError('secretKey is required for presigning');
  }
  if (expires && !isNumber(expires)) {
    throw new TypeError('expires should be of type "number"');
  }
  if (expires && expires < 1) {
    throw new errors.ExpiresParamError('expires param cannot be less than 1 seconds');
  }
  if (expires && expires > PRESIGN_EXPIRY_DAYS_MAX) {
    throw new errors.ExpiresParamError('expires param cannot be greater than 7 days');
  }
  const iso8601Date = makeDateLong(requestDate);
  const signedHeaders = getSignedHeaders(request.headers);
  const credential = getCredential(accessKey, region, requestDate);
  const hashedPayload = 'UNSIGNED-PAYLOAD';
  const requestQuery = [];
  requestQuery.push(`X-Amz-Algorithm=${signV4Algorithm}`);
  requestQuery.push(`X-Amz-Credential=${uriEscape(credential)}`);
  requestQuery.push(`X-Amz-Date=${iso8601Date}`);
  requestQuery.push(`X-Amz-Expires=${expires}`);
  requestQuery.push(`X-Amz-SignedHeaders=${uriEscape(signedHeaders.join(';').toLowerCase())}`);
  if (sessionToken) {
    requestQuery.push(`X-Amz-Security-Token=${uriEscape(sessionToken)}`);
  }
  const resource = request.path.split('?')[0];
  let query = request.path.split('?')[1];
  if (query) {
    query = query + '&' + requestQuery.join('&');
  } else {
    query = requestQuery.join('&');
  }
  const path = resource + '?' + query;
  const canonicalRequest = getCanonicalRequest(request.method, path, request.headers, signedHeaders, hashedPayload);
  const stringToSign = getStringToSign(canonicalRequest, requestDate, region);
  const signingKey = getSigningKey(requestDate, region, secretKey);
  const signature = crypto.createHmac('sha256', signingKey).update(stringToSign).digest('hex').toLowerCase();
  return request.protocol + '//' + request.headers.host + path + `&X-Amz-Signature=${signature}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcnlwdG8iLCJlcnJvcnMiLCJQUkVTSUdOX0VYUElSWV9EQVlTX01BWCIsImdldFNjb3BlIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzU3RyaW5nIiwibWFrZURhdGVMb25nIiwibWFrZURhdGVTaG9ydCIsInVyaUVzY2FwZSIsInNpZ25WNEFsZ29yaXRobSIsImdldENhbm9uaWNhbFJlcXVlc3QiLCJtZXRob2QiLCJwYXRoIiwiaGVhZGVycyIsInNpZ25lZEhlYWRlcnMiLCJoYXNoZWRQYXlsb2FkIiwiVHlwZUVycm9yIiwiQXJyYXkiLCJpc0FycmF5IiwiaGVhZGVyc0FycmF5IiwicmVkdWNlIiwiYWNjIiwiaSIsInZhbCIsInJlcGxhY2UiLCJwdXNoIiwidG9Mb3dlckNhc2UiLCJyZXF1ZXN0UmVzb3VyY2UiLCJzcGxpdCIsInJlcXVlc3RRdWVyeSIsInNvcnQiLCJtYXAiLCJlbGVtZW50IiwiaW5jbHVkZXMiLCJqb2luIiwidG9VcHBlckNhc2UiLCJnZXRDcmVkZW50aWFsIiwiYWNjZXNzS2V5IiwicmVnaW9uIiwicmVxdWVzdERhdGUiLCJzZXJ2aWNlTmFtZSIsImdldFNpZ25lZEhlYWRlcnMiLCJpZ25vcmVkSGVhZGVycyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJoZWFkZXIiLCJnZXRTaWduaW5nS2V5IiwiZGF0ZSIsInNlY3JldEtleSIsImRhdGVMaW5lIiwiaG1hYzEiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0IiwiaG1hYzIiLCJobWFjMyIsImdldFN0cmluZ1RvU2lnbiIsImNhbm9uaWNhbFJlcXVlc3QiLCJoYXNoIiwiY3JlYXRlSGFzaCIsInNjb3BlIiwic3RyaW5nVG9TaWduIiwicG9zdFByZXNpZ25TaWduYXR1cmVWNCIsInBvbGljeUJhc2U2NCIsInNpZ25pbmdLZXkiLCJzaWduVjQiLCJyZXF1ZXN0Iiwic2hhMjU2c3VtIiwiQWNjZXNzS2V5UmVxdWlyZWRFcnJvciIsIlNlY3JldEtleVJlcXVpcmVkRXJyb3IiLCJzZXJ2aWNlSWRlbnRpZmllciIsImNyZWRlbnRpYWwiLCJzaWduYXR1cmUiLCJzaWduVjRCeVNlcnZpY2VOYW1lIiwiY29udGVudFNoYTI1NiIsInByZXNpZ25TaWduYXR1cmVWNCIsInNlc3Npb25Ub2tlbiIsImV4cGlyZXMiLCJFeHBpcmVzUGFyYW1FcnJvciIsImlzbzg2MDFEYXRlIiwicmVzb3VyY2UiLCJxdWVyeSIsInByb3RvY29sIiwiaG9zdCJdLCJzb3VyY2VzIjpbInNpZ25pbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogTWluSU8gSmF2YXNjcmlwdCBMaWJyYXJ5IGZvciBBbWF6b24gUzMgQ29tcGF0aWJsZSBDbG91ZCBTdG9yYWdlLCAoQykgMjAxNiBNaW5JTywgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnbm9kZTpjcnlwdG8nXHJcblxyXG5pbXBvcnQgKiBhcyBlcnJvcnMgZnJvbSAnLi9lcnJvcnMudHMnXHJcbmltcG9ydCB7IFBSRVNJR05fRVhQSVJZX0RBWVNfTUFYIH0gZnJvbSAnLi9oZWxwZXJzLnRzJ1xyXG5pbXBvcnQgeyBnZXRTY29wZSwgaXNOdW1iZXIsIGlzT2JqZWN0LCBpc1N0cmluZywgbWFrZURhdGVMb25nLCBtYWtlRGF0ZVNob3J0LCB1cmlFc2NhcGUgfSBmcm9tICcuL2ludGVybmFsL2hlbHBlci50cydcclxuaW1wb3J0IHR5cGUgeyBJQ2Fub25pY2FsUmVxdWVzdCwgSVJlcXVlc3QsIFJlcXVlc3RIZWFkZXJzIH0gZnJvbSAnLi9pbnRlcm5hbC90eXBlLnRzJ1xyXG5cclxuY29uc3Qgc2lnblY0QWxnb3JpdGhtID0gJ0FXUzQtSE1BQy1TSEEyNTYnXHJcblxyXG4vLyBnZXRDYW5vbmljYWxSZXF1ZXN0IGdlbmVyYXRlIGEgY2Fub25pY2FsIHJlcXVlc3Qgb2Ygc3R5bGUuXHJcbi8vXHJcbi8vIGNhbm9uaWNhbFJlcXVlc3QgPVxyXG4vLyAgPEhUVFBNZXRob2Q+XFxuXHJcbi8vICA8Q2Fub25pY2FsVVJJPlxcblxyXG4vLyAgPENhbm9uaWNhbFF1ZXJ5U3RyaW5nPlxcblxyXG4vLyAgPENhbm9uaWNhbEhlYWRlcnM+XFxuXHJcbi8vICA8U2lnbmVkSGVhZGVycz5cXG5cclxuLy8gIDxIYXNoZWRQYXlsb2FkPlxyXG4vL1xyXG5mdW5jdGlvbiBnZXRDYW5vbmljYWxSZXF1ZXN0KFxyXG4gIG1ldGhvZDogc3RyaW5nLFxyXG4gIHBhdGg6IHN0cmluZyxcclxuICBoZWFkZXJzOiBSZXF1ZXN0SGVhZGVycyxcclxuICBzaWduZWRIZWFkZXJzOiBzdHJpbmdbXSxcclxuICBoYXNoZWRQYXlsb2FkOiBzdHJpbmcsXHJcbik6IElDYW5vbmljYWxSZXF1ZXN0IHtcclxuICBpZiAoIWlzU3RyaW5nKG1ldGhvZCkpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21ldGhvZCBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcclxuICB9XHJcbiAgaWYgKCFpc1N0cmluZyhwYXRoKSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF0aCBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcclxuICB9XHJcbiAgaWYgKCFpc09iamVjdChoZWFkZXJzKSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaGVhZGVycyBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcclxuICB9XHJcbiAgaWYgKCFBcnJheS5pc0FycmF5KHNpZ25lZEhlYWRlcnMpKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaWduZWRIZWFkZXJzIHNob3VsZCBiZSBvZiB0eXBlIFwiYXJyYXlcIicpXHJcbiAgfVxyXG4gIGlmICghaXNTdHJpbmcoaGFzaGVkUGF5bG9hZCkpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2hhc2hlZFBheWxvYWQgc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXHJcbiAgfVxyXG5cclxuICBjb25zdCBoZWFkZXJzQXJyYXkgPSBzaWduZWRIZWFkZXJzLnJlZHVjZSgoYWNjLCBpKSA9PiB7XHJcbiAgICAvLyBUcmltIHNwYWNlcyBmcm9tIHRoZSB2YWx1ZSAocmVxdWlyZWQgYnkgVjQgc3BlYylcclxuICAgIGNvbnN0IHZhbCA9IGAke2hlYWRlcnNbaV19YC5yZXBsYWNlKC8gKy9nLCAnICcpXHJcbiAgICBhY2MucHVzaChgJHtpLnRvTG93ZXJDYXNlKCl9OiR7dmFsfWApXHJcbiAgICByZXR1cm4gYWNjXHJcbiAgfSwgW10gYXMgc3RyaW5nW10pXHJcblxyXG4gIGNvbnN0IHJlcXVlc3RSZXNvdXJjZSA9IHBhdGguc3BsaXQoJz8nKVswXVxyXG4gIGxldCByZXF1ZXN0UXVlcnkgPSBwYXRoLnNwbGl0KCc/JylbMV1cclxuICBpZiAoIXJlcXVlc3RRdWVyeSkge1xyXG4gICAgcmVxdWVzdFF1ZXJ5ID0gJydcclxuICB9XHJcblxyXG4gIGlmIChyZXF1ZXN0UXVlcnkpIHtcclxuICAgIHJlcXVlc3RRdWVyeSA9IHJlcXVlc3RRdWVyeVxyXG4gICAgICAuc3BsaXQoJyYnKVxyXG4gICAgICAuc29ydCgpXHJcbiAgICAgIC5tYXAoKGVsZW1lbnQpID0+ICghZWxlbWVudC5pbmNsdWRlcygnPScpID8gZWxlbWVudCArICc9JyA6IGVsZW1lbnQpKVxyXG4gICAgICAuam9pbignJicpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gW1xyXG4gICAgbWV0aG9kLnRvVXBwZXJDYXNlKCksXHJcbiAgICByZXF1ZXN0UmVzb3VyY2UsXHJcbiAgICByZXF1ZXN0UXVlcnksXHJcbiAgICBoZWFkZXJzQXJyYXkuam9pbignXFxuJykgKyAnXFxuJyxcclxuICAgIHNpZ25lZEhlYWRlcnMuam9pbignOycpLnRvTG93ZXJDYXNlKCksXHJcbiAgICBoYXNoZWRQYXlsb2FkLFxyXG4gIF0uam9pbignXFxuJylcclxufVxyXG5cclxuLy8gZ2VuZXJhdGUgYSBjcmVkZW50aWFsIHN0cmluZ1xyXG5mdW5jdGlvbiBnZXRDcmVkZW50aWFsKGFjY2Vzc0tleTogc3RyaW5nLCByZWdpb246IHN0cmluZywgcmVxdWVzdERhdGU/OiBEYXRlLCBzZXJ2aWNlTmFtZSA9ICdzMycpIHtcclxuICBpZiAoIWlzU3RyaW5nKGFjY2Vzc0tleSkpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FjY2Vzc0tleSBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcclxuICB9XHJcbiAgaWYgKCFpc1N0cmluZyhyZWdpb24pKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWdpb24gc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXHJcbiAgfVxyXG4gIGlmICghaXNPYmplY3QocmVxdWVzdERhdGUpKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZXF1ZXN0RGF0ZSBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcclxuICB9XHJcbiAgcmV0dXJuIGAke2FjY2Vzc0tleX0vJHtnZXRTY29wZShyZWdpb24sIHJlcXVlc3REYXRlLCBzZXJ2aWNlTmFtZSl9YFxyXG59XHJcblxyXG4vLyBSZXR1cm5zIHNpZ25lZCBoZWFkZXJzIGFycmF5IC0gYWxwaGFiZXRpY2FsbHkgc29ydGVkXHJcbmZ1bmN0aW9uIGdldFNpZ25lZEhlYWRlcnMoaGVhZGVyczogUmVxdWVzdEhlYWRlcnMpOiBzdHJpbmdbXSB7XHJcbiAgaWYgKCFpc09iamVjdChoZWFkZXJzKSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVxdWVzdCBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcclxuICB9XHJcbiAgLy8gRXhjZXJwdHMgZnJvbSBAbHNlZ2FsIC0gaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3Mtc2RrLWpzL2lzc3Vlcy82NTkjaXNzdWVjb21tZW50LTEyMDQ3NzI1OFxyXG4gIC8vXHJcbiAgLy8gIFVzZXItQWdlbnQ6XHJcbiAgLy9cclxuICAvLyAgICAgIFRoaXMgaXMgaWdub3JlZCBmcm9tIHNpZ25pbmcgYmVjYXVzZSBzaWduaW5nIHRoaXMgY2F1c2VzIHByb2JsZW1zIHdpdGggZ2VuZXJhdGluZyBwcmUtc2lnbmVkIFVSTHNcclxuICAvLyAgICAgICh0aGF0IGFyZSBleGVjdXRlZCBieSBvdGhlciBhZ2VudHMpIG9yIHdoZW4gY3VzdG9tZXJzIHBhc3MgcmVxdWVzdHMgdGhyb3VnaCBwcm94aWVzLCB3aGljaCBtYXlcclxuICAvLyAgICAgIG1vZGlmeSB0aGUgdXNlci1hZ2VudC5cclxuICAvL1xyXG4gIC8vICBDb250ZW50LUxlbmd0aDpcclxuICAvL1xyXG4gIC8vICAgICAgVGhpcyBpcyBpZ25vcmVkIGZyb20gc2lnbmluZyBiZWNhdXNlIGdlbmVyYXRpbmcgYSBwcmUtc2lnbmVkIFVSTCBzaG91bGQgbm90IHByb3ZpZGUgYSBjb250ZW50LWxlbmd0aFxyXG4gIC8vICAgICAgY29uc3RyYWludCwgc3BlY2lmaWNhbGx5IHdoZW4gdmVuZGluZyBhIFMzIHByZS1zaWduZWQgUFVUIFVSTC4gVGhlIGNvcm9sbGFyeSB0byB0aGlzIGlzIHRoYXQgd2hlblxyXG4gIC8vICAgICAgc2VuZGluZyByZWd1bGFyIHJlcXVlc3RzIChub24tcHJlLXNpZ25lZCksIHRoZSBzaWduYXR1cmUgY29udGFpbnMgYSBjaGVja3N1bSBvZiB0aGUgYm9keSwgd2hpY2hcclxuICAvLyAgICAgIGltcGxpY2l0bHkgdmFsaWRhdGVzIHRoZSBwYXlsb2FkIGxlbmd0aCAoc2luY2UgY2hhbmdpbmcgdGhlIG51bWJlciBvZiBieXRlcyB3b3VsZCBjaGFuZ2UgdGhlIGNoZWNrc3VtKVxyXG4gIC8vICAgICAgYW5kIHRoZXJlZm9yZSB0aGlzIGhlYWRlciBpcyBub3QgdmFsdWFibGUgaW4gdGhlIHNpZ25hdHVyZS5cclxuICAvL1xyXG4gIC8vICBDb250ZW50LVR5cGU6XHJcbiAgLy9cclxuICAvLyAgICAgIFNpZ25pbmcgdGhpcyBoZWFkZXIgY2F1c2VzIHF1aXRlIGEgbnVtYmVyIG9mIHByb2JsZW1zIGluIGJyb3dzZXIgZW52aXJvbm1lbnRzLCB3aGVyZSBicm93c2Vyc1xyXG4gIC8vICAgICAgbGlrZSB0byBtb2RpZnkgYW5kIG5vcm1hbGl6ZSB0aGUgY29udGVudC10eXBlIGhlYWRlciBpbiBkaWZmZXJlbnQgd2F5cy4gVGhlcmUgaXMgbW9yZSBpbmZvcm1hdGlvblxyXG4gIC8vICAgICAgb24gdGhpcyBpbiBodHRwczovL2dpdGh1Yi5jb20vYXdzL2F3cy1zZGstanMvaXNzdWVzLzI0NC4gQXZvaWRpbmcgdGhpcyBmaWVsZCBzaW1wbGlmaWVzIGxvZ2ljXHJcbiAgLy8gICAgICBhbmQgcmVkdWNlcyB0aGUgcG9zc2liaWxpdHkgb2YgZnV0dXJlIGJ1Z3NcclxuICAvL1xyXG4gIC8vICBBdXRob3JpemF0aW9uOlxyXG4gIC8vXHJcbiAgLy8gICAgICBJcyBza2lwcGVkIGZvciBvYnZpb3VzIHJlYXNvbnNcclxuXHJcbiAgY29uc3QgaWdub3JlZEhlYWRlcnMgPSBbJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ3VzZXItYWdlbnQnXVxyXG4gIHJldHVybiBPYmplY3Qua2V5cyhoZWFkZXJzKVxyXG4gICAgLmZpbHRlcigoaGVhZGVyKSA9PiAhaWdub3JlZEhlYWRlcnMuaW5jbHVkZXMoaGVhZGVyKSlcclxuICAgIC5zb3J0KClcclxufVxyXG5cclxuLy8gcmV0dXJucyB0aGUga2V5IHVzZWQgZm9yIGNhbGN1bGF0aW5nIHNpZ25hdHVyZVxyXG5mdW5jdGlvbiBnZXRTaWduaW5nS2V5KGRhdGU6IERhdGUsIHJlZ2lvbjogc3RyaW5nLCBzZWNyZXRLZXk6IHN0cmluZywgc2VydmljZU5hbWUgPSAnczMnKSB7XHJcbiAgaWYgKCFpc09iamVjdChkYXRlKSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0ZSBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcclxuICB9XHJcbiAgaWYgKCFpc1N0cmluZyhyZWdpb24pKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWdpb24gc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXHJcbiAgfVxyXG4gIGlmICghaXNTdHJpbmcoc2VjcmV0S2V5KSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2VjcmV0S2V5IHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxyXG4gIH1cclxuICBjb25zdCBkYXRlTGluZSA9IG1ha2VEYXRlU2hvcnQoZGF0ZSlcclxuICBjb25zdCBobWFjMSA9IGNyeXB0b1xyXG4gICAgICAuY3JlYXRlSG1hYygnc2hhMjU2JywgJ0FXUzQnICsgc2VjcmV0S2V5KVxyXG4gICAgICAudXBkYXRlKGRhdGVMaW5lKVxyXG4gICAgICAuZGlnZXN0KCksXHJcbiAgICBobWFjMiA9IGNyeXB0by5jcmVhdGVIbWFjKCdzaGEyNTYnLCBobWFjMSkudXBkYXRlKHJlZ2lvbikuZGlnZXN0KCksXHJcbiAgICBobWFjMyA9IGNyeXB0by5jcmVhdGVIbWFjKCdzaGEyNTYnLCBobWFjMikudXBkYXRlKHNlcnZpY2VOYW1lKS5kaWdlc3QoKVxyXG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2JywgaG1hYzMpLnVwZGF0ZSgnYXdzNF9yZXF1ZXN0JykuZGlnZXN0KClcclxufVxyXG5cclxuLy8gcmV0dXJucyB0aGUgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgc2lnbmVkXHJcbmZ1bmN0aW9uIGdldFN0cmluZ1RvU2lnbihjYW5vbmljYWxSZXF1ZXN0OiBJQ2Fub25pY2FsUmVxdWVzdCwgcmVxdWVzdERhdGU6IERhdGUsIHJlZ2lvbjogc3RyaW5nLCBzZXJ2aWNlTmFtZSA9ICdzMycpIHtcclxuICBpZiAoIWlzU3RyaW5nKGNhbm9uaWNhbFJlcXVlc3QpKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5vbmljYWxSZXF1ZXN0IHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxyXG4gIH1cclxuICBpZiAoIWlzT2JqZWN0KHJlcXVlc3REYXRlKSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVxdWVzdERhdGUgc2hvdWxkIGJlIG9mIHR5cGUgXCJvYmplY3RcIicpXHJcbiAgfVxyXG4gIGlmICghaXNTdHJpbmcocmVnaW9uKSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVnaW9uIHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxyXG4gIH1cclxuICBjb25zdCBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShjYW5vbmljYWxSZXF1ZXN0KS5kaWdlc3QoJ2hleCcpXHJcbiAgY29uc3Qgc2NvcGUgPSBnZXRTY29wZShyZWdpb24sIHJlcXVlc3REYXRlLCBzZXJ2aWNlTmFtZSlcclxuICBjb25zdCBzdHJpbmdUb1NpZ24gPSBbc2lnblY0QWxnb3JpdGhtLCBtYWtlRGF0ZUxvbmcocmVxdWVzdERhdGUpLCBzY29wZSwgaGFzaF1cclxuXHJcbiAgcmV0dXJuIHN0cmluZ1RvU2lnbi5qb2luKCdcXG4nKVxyXG59XHJcblxyXG4vLyBjYWxjdWxhdGUgdGhlIHNpZ25hdHVyZSBvZiB0aGUgUE9TVCBwb2xpY3lcclxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RQcmVzaWduU2lnbmF0dXJlVjQocmVnaW9uOiBzdHJpbmcsIGRhdGU6IERhdGUsIHNlY3JldEtleTogc3RyaW5nLCBwb2xpY3lCYXNlNjQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgaWYgKCFpc1N0cmluZyhyZWdpb24pKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWdpb24gc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXHJcbiAgfVxyXG4gIGlmICghaXNPYmplY3QoZGF0ZSkpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGUgc2hvdWxkIGJlIG9mIHR5cGUgXCJvYmplY3RcIicpXHJcbiAgfVxyXG4gIGlmICghaXNTdHJpbmcoc2VjcmV0S2V5KSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2VjcmV0S2V5IHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxyXG4gIH1cclxuICBpZiAoIWlzU3RyaW5nKHBvbGljeUJhc2U2NCkpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BvbGljeUJhc2U2NCBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcclxuICB9XHJcbiAgY29uc3Qgc2lnbmluZ0tleSA9IGdldFNpZ25pbmdLZXkoZGF0ZSwgcmVnaW9uLCBzZWNyZXRLZXkpXHJcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIbWFjKCdzaGEyNTYnLCBzaWduaW5nS2V5KS51cGRhdGUocG9saWN5QmFzZTY0KS5kaWdlc3QoJ2hleCcpLnRvTG93ZXJDYXNlKClcclxufVxyXG5cclxuLy8gUmV0dXJucyB0aGUgYXV0aG9yaXphdGlvbiBoZWFkZXJcclxuZXhwb3J0IGZ1bmN0aW9uIHNpZ25WNChcclxuICByZXF1ZXN0OiBJUmVxdWVzdCxcclxuICBhY2Nlc3NLZXk6IHN0cmluZyxcclxuICBzZWNyZXRLZXk6IHN0cmluZyxcclxuICByZWdpb246IHN0cmluZyxcclxuICByZXF1ZXN0RGF0ZTogRGF0ZSxcclxuICBzaGEyNTZzdW06IHN0cmluZyxcclxuICBzZXJ2aWNlTmFtZSA9ICdzMycsXHJcbikge1xyXG4gIGlmICghaXNPYmplY3QocmVxdWVzdCkpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlcXVlc3Qgc2hvdWxkIGJlIG9mIHR5cGUgXCJvYmplY3RcIicpXHJcbiAgfVxyXG4gIGlmICghaXNTdHJpbmcoYWNjZXNzS2V5KSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWNjZXNzS2V5IHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxyXG4gIH1cclxuICBpZiAoIWlzU3RyaW5nKHNlY3JldEtleSkpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NlY3JldEtleSBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcclxuICB9XHJcbiAgaWYgKCFpc1N0cmluZyhyZWdpb24pKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWdpb24gc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXHJcbiAgfVxyXG5cclxuICBpZiAoIWFjY2Vzc0tleSkge1xyXG4gICAgdGhyb3cgbmV3IGVycm9ycy5BY2Nlc3NLZXlSZXF1aXJlZEVycm9yKCdhY2Nlc3NLZXkgaXMgcmVxdWlyZWQgZm9yIHNpZ25pbmcnKVxyXG4gIH1cclxuICBpZiAoIXNlY3JldEtleSkge1xyXG4gICAgdGhyb3cgbmV3IGVycm9ycy5TZWNyZXRLZXlSZXF1aXJlZEVycm9yKCdzZWNyZXRLZXkgaXMgcmVxdWlyZWQgZm9yIHNpZ25pbmcnKVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2lnbmVkSGVhZGVycyA9IGdldFNpZ25lZEhlYWRlcnMocmVxdWVzdC5oZWFkZXJzKVxyXG4gIGNvbnN0IGNhbm9uaWNhbFJlcXVlc3QgPSBnZXRDYW5vbmljYWxSZXF1ZXN0KHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnBhdGgsIHJlcXVlc3QuaGVhZGVycywgc2lnbmVkSGVhZGVycywgc2hhMjU2c3VtKVxyXG4gIGNvbnN0IHNlcnZpY2VJZGVudGlmaWVyID0gc2VydmljZU5hbWUgfHwgJ3MzJ1xyXG4gIGNvbnN0IHN0cmluZ1RvU2lnbiA9IGdldFN0cmluZ1RvU2lnbihjYW5vbmljYWxSZXF1ZXN0LCByZXF1ZXN0RGF0ZSwgcmVnaW9uLCBzZXJ2aWNlSWRlbnRpZmllcilcclxuICBjb25zdCBzaWduaW5nS2V5ID0gZ2V0U2lnbmluZ0tleShyZXF1ZXN0RGF0ZSwgcmVnaW9uLCBzZWNyZXRLZXksIHNlcnZpY2VJZGVudGlmaWVyKVxyXG4gIGNvbnN0IGNyZWRlbnRpYWwgPSBnZXRDcmVkZW50aWFsKGFjY2Vzc0tleSwgcmVnaW9uLCByZXF1ZXN0RGF0ZSwgc2VydmljZUlkZW50aWZpZXIpXHJcbiAgY29uc3Qgc2lnbmF0dXJlID0gY3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNpZ25pbmdLZXkpLnVwZGF0ZShzdHJpbmdUb1NpZ24pLmRpZ2VzdCgnaGV4JykudG9Mb3dlckNhc2UoKVxyXG5cclxuICByZXR1cm4gYCR7c2lnblY0QWxnb3JpdGhtfSBDcmVkZW50aWFsPSR7Y3JlZGVudGlhbH0sIFNpZ25lZEhlYWRlcnM9JHtzaWduZWRIZWFkZXJzXHJcbiAgICAuam9pbignOycpXHJcbiAgICAudG9Mb3dlckNhc2UoKX0sIFNpZ25hdHVyZT0ke3NpZ25hdHVyZX1gXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaWduVjRCeVNlcnZpY2VOYW1lKFxyXG4gIHJlcXVlc3Q6IElSZXF1ZXN0LFxyXG4gIGFjY2Vzc0tleTogc3RyaW5nLFxyXG4gIHNlY3JldEtleTogc3RyaW5nLFxyXG4gIHJlZ2lvbjogc3RyaW5nLFxyXG4gIHJlcXVlc3REYXRlOiBEYXRlLFxyXG4gIGNvbnRlbnRTaGEyNTY6IHN0cmluZyxcclxuICBzZXJ2aWNlTmFtZSA9ICdzMycsXHJcbik6IHN0cmluZyB7XHJcbiAgcmV0dXJuIHNpZ25WNChyZXF1ZXN0LCBhY2Nlc3NLZXksIHNlY3JldEtleSwgcmVnaW9uLCByZXF1ZXN0RGF0ZSwgY29udGVudFNoYTI1Niwgc2VydmljZU5hbWUpXHJcbn1cclxuXHJcbi8vIHJldHVybnMgYSBwcmVzaWduZWQgVVJMIHN0cmluZ1xyXG5leHBvcnQgZnVuY3Rpb24gcHJlc2lnblNpZ25hdHVyZVY0KFxyXG4gIHJlcXVlc3Q6IElSZXF1ZXN0LFxyXG4gIGFjY2Vzc0tleTogc3RyaW5nLFxyXG4gIHNlY3JldEtleTogc3RyaW5nLFxyXG4gIHNlc3Npb25Ub2tlbjogc3RyaW5nIHwgdW5kZWZpbmVkLFxyXG4gIHJlZ2lvbjogc3RyaW5nLFxyXG4gIHJlcXVlc3REYXRlOiBEYXRlLFxyXG4gIGV4cGlyZXM6IG51bWJlciB8IHVuZGVmaW5lZCxcclxuKSB7XHJcbiAgaWYgKCFpc09iamVjdChyZXF1ZXN0KSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVxdWVzdCBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcclxuICB9XHJcbiAgaWYgKCFpc1N0cmluZyhhY2Nlc3NLZXkpKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhY2Nlc3NLZXkgc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXHJcbiAgfVxyXG4gIGlmICghaXNTdHJpbmcoc2VjcmV0S2V5KSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2VjcmV0S2V5IHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxyXG4gIH1cclxuICBpZiAoIWlzU3RyaW5nKHJlZ2lvbikpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZ2lvbiBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcclxuICB9XHJcblxyXG4gIGlmICghYWNjZXNzS2V5KSB7XHJcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkFjY2Vzc0tleVJlcXVpcmVkRXJyb3IoJ2FjY2Vzc0tleSBpcyByZXF1aXJlZCBmb3IgcHJlc2lnbmluZycpXHJcbiAgfVxyXG4gIGlmICghc2VjcmV0S2V5KSB7XHJcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlNlY3JldEtleVJlcXVpcmVkRXJyb3IoJ3NlY3JldEtleSBpcyByZXF1aXJlZCBmb3IgcHJlc2lnbmluZycpXHJcbiAgfVxyXG5cclxuICBpZiAoZXhwaXJlcyAmJiAhaXNOdW1iZXIoZXhwaXJlcykpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4cGlyZXMgc2hvdWxkIGJlIG9mIHR5cGUgXCJudW1iZXJcIicpXHJcbiAgfVxyXG4gIGlmIChleHBpcmVzICYmIGV4cGlyZXMgPCAxKSB7XHJcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkV4cGlyZXNQYXJhbUVycm9yKCdleHBpcmVzIHBhcmFtIGNhbm5vdCBiZSBsZXNzIHRoYW4gMSBzZWNvbmRzJylcclxuICB9XHJcbiAgaWYgKGV4cGlyZXMgJiYgZXhwaXJlcyA+IFBSRVNJR05fRVhQSVJZX0RBWVNfTUFYKSB7XHJcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkV4cGlyZXNQYXJhbUVycm9yKCdleHBpcmVzIHBhcmFtIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gNyBkYXlzJylcclxuICB9XHJcblxyXG4gIGNvbnN0IGlzbzg2MDFEYXRlID0gbWFrZURhdGVMb25nKHJlcXVlc3REYXRlKVxyXG4gIGNvbnN0IHNpZ25lZEhlYWRlcnMgPSBnZXRTaWduZWRIZWFkZXJzKHJlcXVlc3QuaGVhZGVycylcclxuICBjb25zdCBjcmVkZW50aWFsID0gZ2V0Q3JlZGVudGlhbChhY2Nlc3NLZXksIHJlZ2lvbiwgcmVxdWVzdERhdGUpXHJcbiAgY29uc3QgaGFzaGVkUGF5bG9hZCA9ICdVTlNJR05FRC1QQVlMT0FEJ1xyXG5cclxuICBjb25zdCByZXF1ZXN0UXVlcnk6IHN0cmluZ1tdID0gW11cclxuICByZXF1ZXN0UXVlcnkucHVzaChgWC1BbXotQWxnb3JpdGhtPSR7c2lnblY0QWxnb3JpdGhtfWApXHJcbiAgcmVxdWVzdFF1ZXJ5LnB1c2goYFgtQW16LUNyZWRlbnRpYWw9JHt1cmlFc2NhcGUoY3JlZGVudGlhbCl9YClcclxuICByZXF1ZXN0UXVlcnkucHVzaChgWC1BbXotRGF0ZT0ke2lzbzg2MDFEYXRlfWApXHJcbiAgcmVxdWVzdFF1ZXJ5LnB1c2goYFgtQW16LUV4cGlyZXM9JHtleHBpcmVzfWApXHJcbiAgcmVxdWVzdFF1ZXJ5LnB1c2goYFgtQW16LVNpZ25lZEhlYWRlcnM9JHt1cmlFc2NhcGUoc2lnbmVkSGVhZGVycy5qb2luKCc7JykudG9Mb3dlckNhc2UoKSl9YClcclxuICBpZiAoc2Vzc2lvblRva2VuKSB7XHJcbiAgICByZXF1ZXN0UXVlcnkucHVzaChgWC1BbXotU2VjdXJpdHktVG9rZW49JHt1cmlFc2NhcGUoc2Vzc2lvblRva2VuKX1gKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVzb3VyY2UgPSByZXF1ZXN0LnBhdGguc3BsaXQoJz8nKVswXVxyXG4gIGxldCBxdWVyeSA9IHJlcXVlc3QucGF0aC5zcGxpdCgnPycpWzFdXHJcbiAgaWYgKHF1ZXJ5KSB7XHJcbiAgICBxdWVyeSA9IHF1ZXJ5ICsgJyYnICsgcmVxdWVzdFF1ZXJ5LmpvaW4oJyYnKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBxdWVyeSA9IHJlcXVlc3RRdWVyeS5qb2luKCcmJylcclxuICB9XHJcblxyXG4gIGNvbnN0IHBhdGggPSByZXNvdXJjZSArICc/JyArIHF1ZXJ5XHJcblxyXG4gIGNvbnN0IGNhbm9uaWNhbFJlcXVlc3QgPSBnZXRDYW5vbmljYWxSZXF1ZXN0KHJlcXVlc3QubWV0aG9kLCBwYXRoLCByZXF1ZXN0LmhlYWRlcnMsIHNpZ25lZEhlYWRlcnMsIGhhc2hlZFBheWxvYWQpXHJcblxyXG4gIGNvbnN0IHN0cmluZ1RvU2lnbiA9IGdldFN0cmluZ1RvU2lnbihjYW5vbmljYWxSZXF1ZXN0LCByZXF1ZXN0RGF0ZSwgcmVnaW9uKVxyXG4gIGNvbnN0IHNpZ25pbmdLZXkgPSBnZXRTaWduaW5nS2V5KHJlcXVlc3REYXRlLCByZWdpb24sIHNlY3JldEtleSlcclxuICBjb25zdCBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2Jywgc2lnbmluZ0tleSkudXBkYXRlKHN0cmluZ1RvU2lnbikuZGlnZXN0KCdoZXgnKS50b0xvd2VyQ2FzZSgpXHJcbiAgcmV0dXJuIHJlcXVlc3QucHJvdG9jb2wgKyAnLy8nICsgcmVxdWVzdC5oZWFkZXJzLmhvc3QgKyBwYXRoICsgYCZYLUFtei1TaWduYXR1cmU9JHtzaWduYXR1cmV9YFxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sS0FBS0EsTUFBTTtBQUVsQixPQUFPLEtBQUtDLE1BQU0sTUFBTSxjQUFhO0FBQ3JDLFNBQVNDLHVCQUF1QixRQUFRLGVBQWM7QUFDdEQsU0FBU0MsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxZQUFZLEVBQUVDLGFBQWEsRUFBRUMsU0FBUyxRQUFRLHVCQUFzQjtBQUdySCxNQUFNQyxlQUFlLEdBQUcsa0JBQWtCOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLG1CQUFtQkEsQ0FDMUJDLE1BQWMsRUFDZEMsSUFBWSxFQUNaQyxPQUF1QixFQUN2QkMsYUFBdUIsRUFDdkJDLGFBQXFCLEVBQ0Y7RUFDbkIsSUFBSSxDQUFDVixRQUFRLENBQUNNLE1BQU0sQ0FBQyxFQUFFO0lBQ3JCLE1BQU0sSUFBSUssU0FBUyxDQUFDLG1DQUFtQyxDQUFDO0VBQzFEO0VBQ0EsSUFBSSxDQUFDWCxRQUFRLENBQUNPLElBQUksQ0FBQyxFQUFFO0lBQ25C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