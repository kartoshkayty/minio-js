"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeDirAndFiles = removeDirAndFiles;
var fs = _interopRequireWildcard(require("fs"), true);
var path = _interopRequireWildcard(require("path"), true);
var querystring = _interopRequireWildcard(require("query-string"), true);
var errors = _interopRequireWildcard(require("./errors.js"), true);
var _helper = require("./internal/helper.js");
var _type = require("./internal/type.js");
exports.RETENTION_MODES = _type.RETENTION_MODES;
exports.ENCRYPTION_TYPES = _type.ENCRYPTION_TYPES;
exports.LEGAL_HOLD_STATUS = _type.LEGAL_HOLD_STATUS;
exports.RETENTION_VALIDITY_UNITS = _type.RETENTION_VALIDITY_UNITS;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const DEFAULT_REGION = exports.DEFAULT_REGION = 'us-east-1';
const PRESIGN_EXPIRY_DAYS_MAX = exports.PRESIGN_EXPIRY_DAYS_MAX = 24 * 60 * 60 * 7; // 7 days in seconds

class CopySourceOptions {
  constructor({
    Bucket,
    Object,
    VersionID = '',
    MatchETag = '',
    NoMatchETag = '',
    MatchModifiedSince = null,
    MatchUnmodifiedSince = null,
    MatchRange = false,
    Start = 0,
    End = 0,
    Encryption = undefined
  }) {
    this.Bucket = Bucket;
    this.Object = Object;
    this.VersionID = VersionID;
    this.MatchETag = MatchETag;
    this.NoMatchETag = NoMatchETag;
    this.MatchModifiedSince = MatchModifiedSince;
    this.MatchUnmodifiedSince = MatchUnmodifiedSince;
    this.MatchRange = MatchRange;
    this.Start = Start;
    this.End = End;
    this.Encryption = Encryption;
  }
  validate() {
    if (!(0, _helper.isValidBucketName)(this.Bucket)) {
      throw new errors.InvalidBucketNameError('Invalid Source bucket name: ' + this.Bucket);
    }
    if (!(0, _helper.isValidObjectName)(this.Object)) {
      throw new errors.InvalidObjectNameError(`Invalid Source object name: ${this.Object}`);
    }
    if (this.MatchRange && this.Start !== -1 && this.End !== -1 && this.Start > this.End || this.Start < 0) {
      throw new errors.InvalidObjectNameError('Source start must be non-negative, and start must be at most end.');
    } else if (this.MatchRange && !(0, _helper.isNumber)(this.Start) || !(0, _helper.isNumber)(this.End)) {
      throw new errors.InvalidObjectNameError('MatchRange is specified. But Invalid Start and End values are specified.');
    }
    return true;
  }
  getHeaders() {
    const headerOptions = {};
    headerOptions['x-amz-copy-source'] = encodeURI(this.Bucket + '/' + this.Object);
    if (!(0, _helper.isEmpty)(this.VersionID)) {
      headerOptions['x-amz-copy-source'] = `${encodeURI(this.Bucket + '/' + this.Object)}?versionId=${this.VersionID}`;
    }
    if (!(0, _helper.isEmpty)(this.MatchETag)) {
      headerOptions['x-amz-copy-source-if-match'] = this.MatchETag;
    }
    if (!(0, _helper.isEmpty)(this.NoMatchETag)) {
      headerOptions['x-amz-copy-source-if-none-match'] = this.NoMatchETag;
    }
    if (!(0, _helper.isEmpty)(this.MatchModifiedSince)) {
      headerOptions['x-amz-copy-source-if-modified-since'] = this.MatchModifiedSince;
    }
    if (!(0, _helper.isEmpty)(this.MatchUnmodifiedSince)) {
      headerOptions['x-amz-copy-source-if-unmodified-since'] = this.MatchUnmodifiedSince;
    }
    return headerOptions;
  }
}

/**
 * @deprecated use nodejs fs module
 */
exports.CopySourceOptions = CopySourceOptions;
function removeDirAndFiles(dirPath, removeSelf = true) {
  if (removeSelf) {
    return fs.rmSync(dirPath, {
      recursive: true,
      force: true
    });
  }
  fs.readdirSync(dirPath).forEach(item => {
    fs.rmSync(path.join(dirPath, item), {
      recursive: true,
      force: true
    });
  });
}
class CopyDestinationOptions {
  constructor({
    Bucket,
    Object,
    Encryption,
    UserMetadata,
    UserTags,
    LegalHold,
    RetainUntilDate,
    Mode,
    MetadataDirective,
    Headers
  }) {
    this.Bucket = Bucket;
    this.Object = Object;
    this.Encryption = Encryption ?? undefined; // null input will become undefined, easy for runtime assert
    this.UserMetadata = UserMetadata;
    this.UserTags = UserTags;
    this.LegalHold = LegalHold;
    this.Mode = Mode; // retention mode
    this.RetainUntilDate = RetainUntilDate;
    this.MetadataDirective = MetadataDirective;
    this.Headers = Headers;
  }
  getHeaders() {
    const replaceDirective = 'REPLACE';
    const headerOptions = {};
    const userTags = this.UserTags;
    if (!(0, _helper.isEmpty)(userTags)) {
      headerOptions['X-Amz-Tagging-Directive'] = replaceDirective;
      headerOptions['X-Amz-Tagging'] = (0, _helper.isObject)(userTags) ? querystring.stringify(userTags) : (0, _helper.isString)(userTags) ? userTags : '';
    }
    if (this.Mode) {
      headerOptions['X-Amz-Object-Lock-Mode'] = this.Mode; // GOVERNANCE or COMPLIANCE
    }
    if (this.RetainUntilDate) {
      headerOptions['X-Amz-Object-Lock-Retain-Until-Date'] = this.RetainUntilDate; // needs to be UTC.
    }
    if (this.LegalHold) {
      headerOptions['X-Amz-Object-Lock-Legal-Hold'] = this.LegalHold; // ON or OFF
    }
    if (this.UserMetadata) {
      for (const [key, value] of Object.entries(this.UserMetadata)) {
        headerOptions[`X-Amz-Meta-${key}`] = value.toString();
      }
    }
    if (this.MetadataDirective) {
      headerOptions[`X-Amz-Metadata-Directive`] = this.MetadataDirective;
    }
    if (this.Encryption) {
      const encryptionHeaders = (0, _helper.getEncryptionHeaders)(this.Encryption);
      for (const [key, value] of Object.entries(encryptionHeaders)) {
        headerOptions[key] = value;
      }
    }
    if (this.Headers) {
      for (const [key, value] of Object.entries(this.Headers)) {
        headerOptions[key] = value;
      }
    }
    return headerOptions;
  }
  validate() {
    if (!(0, _helper.isValidBucketName)(this.Bucket)) {
      throw new errors.InvalidBucketNameError('Invalid Destination bucket name: ' + this.Bucket);
    }
    if (!(0, _helper.isValidObjectName)(this.Object)) {
      throw new errors.InvalidObjectNameError(`Invalid Destination object name: ${this.Object}`);
    }
    if (!(0, _helper.isEmpty)(this.UserMetadata) && !(0, _helper.isObject)(this.UserMetadata)) {
      throw new errors.InvalidObjectNameError(`Destination UserMetadata should be an object with key value pairs`);
    }
    if (!(0, _helper.isEmpty)(this.Mode) && ![_type.RETENTION_MODES.GOVERNANCE, _type.RETENTION_MODES.COMPLIANCE].includes(this.Mode)) {
      throw new errors.InvalidObjectNameError(`Invalid Mode specified for destination object it should be one of [GOVERNANCE,COMPLIANCE]`);
    }
    if (this.Encryption !== undefined && (0, _helper.isEmptyObject)(this.Encryption)) {
      throw new errors.InvalidObjectNameError(`Invalid Encryption configuration for destination object `);
    }
    return true;
  }
}

/**
 * maybe this should be a generic type for Records, leave it for later refactor
 */
exports.CopyDestinationOptions = CopyDestinationOptions;
class SelectResults {
  constructor({
    records,
    // parsed data as stream
    response,
    // original response stream
    stats,
    // stats as xml
    progress // stats as xml
  }) {
    this.records = records;
    this.response = response;
    this.stats = stats;
    this.progress = progress;
  }
  setStats(stats) {
    this.stats = stats;
  }
  getStats() {
    return this.stats;
  }
  setProgress(progress) {
    this.progress = progress;
  }
  getProgress() {
    return this.progress;
  }
  setResponse(response) {
    this.response = response;
  }
  getResponse() {
    return this.response;
  }
  setRecords(records) {
    this.records = records;
  }
  getRecords() {
    return this.records;
  }
}
exports.SelectResults = SelectResults;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsInBhdGgiLCJxdWVyeXN0cmluZyIsImVycm9ycyIsIl9oZWxwZXIiLCJfdHlwZSIsImV4cG9ydHMiLCJSRVRFTlRJT05fTU9ERVMiLCJFTkNSWVBUSU9OX1RZUEVTIiwiTEVHQUxfSE9MRF9TVEFUVVMiLCJSRVRFTlRJT05fVkFMSURJVFlfVU5JVFMiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJERUZBVUxUX1JFR0lPTiIsIlBSRVNJR05fRVhQSVJZX0RBWVNfTUFYIiwiQ29weVNvdXJjZU9wdGlvbnMiLCJjb25zdHJ1Y3RvciIsIkJ1Y2tldCIsIlZlcnNpb25JRCIsIk1hdGNoRVRhZyIsIk5vTWF0Y2hFVGFnIiwiTWF0Y2hNb2RpZmllZFNpbmNlIiwiTWF0Y2hVbm1vZGlmaWVkU2luY2UiLCJNYXRjaFJhbmdlIiwiU3RhcnQiLCJFbmQiLCJFbmNyeXB0aW9uIiwidW5kZWZpbmVkIiwidmFsaWRhdGUiLCJpc1ZhbGlkQnVja2V0TmFtZSIsIkludmFsaWRCdWNrZXROYW1lRXJyb3IiLCJpc1ZhbGlkT2JqZWN0TmFtZSIsIkludmFsaWRPYmplY3ROYW1lRXJyb3IiLCJpc051bWJlciIsImdldEhlYWRlcnMiLCJoZWFkZXJPcHRpb25zIiwiZW5jb2RlVVJJIiwiaXNFbXB0eSIsInJlbW92ZURpckFuZEZpbGVzIiwiZGlyUGF0aCIsInJlbW92ZVNlbGYiLCJybVN5bmMiLCJyZWN1cnNpdmUiLCJmb3JjZSIsInJlYWRkaXJTeW5jIiwiZm9yRWFjaCIsIml0ZW0iLCJqb2luIiwiQ29weURlc3RpbmF0aW9uT3B0aW9ucyIsIlVzZXJNZXRhZGF0YSIsIlVzZXJUYWdzIiwiTGVnYWxIb2xkIiwiUmV0YWluVW50aWxEYXRlIiwiTW9kZSIsIk1ldGFkYXRhRGlyZWN0aXZlIiwiSGVhZGVycyIsInJlcGxhY2VEaXJlY3RpdmUiLCJ1c2VyVGFncyIsImlzT2JqZWN0Iiwic3RyaW5naWZ5IiwiaXNTdHJpbmciLCJrZXkiLCJ2YWx1ZSIsImVudHJpZXMiLCJ0b1N0cmluZyIsImVuY3J5cHRpb25IZWFkZXJzIiwiZ2V0RW5jcnlwdGlvbkhlYWRlcnMiLCJHT1ZFUk5BTkNFIiwiQ09NUExJQU5DRSIsImluY2x1ZGVzIiwiaXNFbXB0eU9iamVjdCIsIlNlbGVjdFJlc3VsdHMiLCJyZWNvcmRzIiwicmVzcG9uc2UiLCJzdGF0cyIsInByb2dyZXNzIiwic2V0U3RhdHMiLCJnZXRTdGF0cyIsInNldFByb2dyZXNzIiwiZ2V0UHJvZ3Jlc3MiLCJzZXRSZXNwb25zZSIsImdldFJlc3BvbnNlIiwic2V0UmVjb3JkcyIsImdldFJlY29yZHMiXSwic291cmNlcyI6WyJoZWxwZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ25vZGU6ZnMnXHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAnbm9kZTpwYXRoJ1xyXG5cclxuaW1wb3J0ICogYXMgcXVlcnlzdHJpbmcgZnJvbSAncXVlcnktc3RyaW5nJ1xyXG5cclxuaW1wb3J0ICogYXMgZXJyb3JzIGZyb20gJy4vZXJyb3JzLnRzJ1xyXG5pbXBvcnQge1xyXG4gIGdldEVuY3J5cHRpb25IZWFkZXJzLFxyXG4gIGlzRW1wdHksXHJcbiAgaXNFbXB0eU9iamVjdCxcclxuICBpc051bWJlcixcclxuICBpc09iamVjdCxcclxuICBpc1N0cmluZyxcclxuICBpc1ZhbGlkQnVja2V0TmFtZSxcclxuICBpc1ZhbGlkT2JqZWN0TmFtZSxcclxufSBmcm9tICcuL2ludGVybmFsL2hlbHBlci50cydcclxuaW1wb3J0IHR5cGUgeyBFbmNyeXB0aW9uLCBPYmplY3RNZXRhRGF0YSwgUmVxdWVzdEhlYWRlcnMgfSBmcm9tICcuL2ludGVybmFsL3R5cGUudHMnXHJcbmltcG9ydCB7IFJFVEVOVElPTl9NT0RFUyB9IGZyb20gJy4vaW50ZXJuYWwvdHlwZS50cydcclxuXHJcbmV4cG9ydCB7IEVOQ1JZUFRJT05fVFlQRVMsIExFR0FMX0hPTERfU1RBVFVTLCBSRVRFTlRJT05fTU9ERVMsIFJFVEVOVElPTl9WQUxJRElUWV9VTklUUyB9IGZyb20gJy4vaW50ZXJuYWwvdHlwZS50cydcclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFR0lPTiA9ICd1cy1lYXN0LTEnXHJcblxyXG5leHBvcnQgY29uc3QgUFJFU0lHTl9FWFBJUllfREFZU19NQVggPSAyNCAqIDYwICogNjAgKiA3IC8vIDcgZGF5cyBpbiBzZWNvbmRzXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElDb3B5U291cmNlT3B0aW9ucyB7XHJcbiAgQnVja2V0OiBzdHJpbmdcclxuICBPYmplY3Q6IHN0cmluZ1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkIHZlcnNpb25JZFxyXG4gICAqL1xyXG4gIFZlcnNpb25JRD86IHN0cmluZ1xyXG4gIC8qKlxyXG4gICAqIEV0YWcgdG8gbWF0Y2hcclxuICAgKi9cclxuICBNYXRjaEVUYWc/OiBzdHJpbmdcclxuICAvKipcclxuICAgKiBFdGFnIHRvIGV4Y2x1ZGVcclxuICAgKi9cclxuICBOb01hdGNoRVRhZz86IHN0cmluZ1xyXG4gIC8qKlxyXG4gICAqIE1vZGlmaWVkIERhdGUgb2YgdGhlIG9iamVjdC9wYXJ0LiAgVVRDIERhdGUgaW4gc3RyaW5nIGZvcm1hdFxyXG4gICAqL1xyXG4gIE1hdGNoTW9kaWZpZWRTaW5jZT86IHN0cmluZyB8IG51bGxcclxuICAvKipcclxuICAgKiBNb2RpZmllZCBEYXRlIG9mIHRoZSBvYmplY3QvcGFydCB0byBleGNsdWRlIFVUQyBEYXRlIGluIHN0cmluZyBmb3JtYXRcclxuICAgKi9cclxuICBNYXRjaFVubW9kaWZpZWRTaW5jZT86IHN0cmluZyB8IG51bGxcclxuICAvKipcclxuICAgKiB0cnVlIG9yIGZhbHNlIE9iamVjdCByYW5nZSB0byBtYXRjaFxyXG4gICAqL1xyXG4gIE1hdGNoUmFuZ2U/OiBib29sZWFuXHJcbiAgU3RhcnQ/OiBudW1iZXJcclxuICBFbmQ/OiBudW1iZXJcclxuICBFbmNyeXB0aW9uPzogRW5jcnlwdGlvblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29weVNvdXJjZU9wdGlvbnMge1xyXG4gIHB1YmxpYyByZWFkb25seSBCdWNrZXQ6IHN0cmluZ1xyXG4gIHB1YmxpYyByZWFkb25seSBPYmplY3Q6IHN0cmluZ1xyXG4gIHB1YmxpYyByZWFkb25seSBWZXJzaW9uSUQ6IHN0cmluZ1xyXG4gIHB1YmxpYyBNYXRjaEVUYWc6IHN0cmluZ1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgTm9NYXRjaEVUYWc6IHN0cmluZ1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgTWF0Y2hNb2RpZmllZFNpbmNlOiBzdHJpbmcgfCBudWxsXHJcbiAgcHJpdmF0ZSByZWFkb25seSBNYXRjaFVubW9kaWZpZWRTaW5jZTogc3RyaW5nIHwgbnVsbFxyXG4gIHB1YmxpYyByZWFkb25seSBNYXRjaFJhbmdlOiBib29sZWFuXHJcbiAgcHVibGljIHJlYWRvbmx5IFN0YXJ0OiBudW1iZXJcclxuICBwdWJsaWMgcmVhZG9ubHkgRW5kOiBudW1iZXJcclxuICBwcml2YXRlIHJlYWRvbmx5IEVuY3J5cHRpb24/OiBFbmNyeXB0aW9uXHJcblxyXG4gIGNvbnN0cnVjdG9yKHtcclxuICAgIEJ1Y2tldCxcclxuICAgIE9iamVjdCxcclxuICAgIFZlcnNpb25JRCA9ICcnLFxyXG4gICAgTWF0Y2hFVGFnID0gJycsXHJcbiAgICBOb01hdGNoRVRhZyA9ICcnLFxyXG4gICAgTWF0Y2hNb2RpZmllZFNpbmNlID0gbnVsbCxcclxuICAgIE1hdGNoVW5tb2RpZmllZFNpbmNlID0gbnVsbCxcclxuICAgIE1hdGNoUmFuZ2UgPSBmYWxzZSxcclxuICAgIFN0YXJ0ID0gMCxcclxuICAgIEVuZCA9IDAsXHJcbiAgICBFbmNyeXB0aW9uID0gdW5kZWZpbmVkLFxyXG4gIH06IElDb3B5U291cmNlT3B0aW9ucykge1xyXG4gICAgdGhpcy5CdWNrZXQgPSBCdWNrZXRcclxuICAgIHRoaXMuT2JqZWN0ID0gT2JqZWN0XHJcbiAgICB0aGlzLlZlcnNpb25JRCA9IFZlcnNpb25JRFxyXG4gICAgdGhpcy5NYXRjaEVUYWcgPSBNYXRjaEVUYWdcclxuICAgIHRoaXMuTm9NYXRjaEVUYWcgPSBOb01hdGNoRVRhZ1xyXG4gICAgdGhpcy5NYXRjaE1vZGlmaWVkU2luY2UgPSBNYXRjaE1vZGlmaWVkU2luY2VcclxuICAgIHRoaXMuTWF0Y2hVbm1vZGlmaWVkU2luY2UgPSBNYXRjaFVubW9kaWZpZWRTaW5jZVxyXG4gICAgdGhpcy5NYXRjaFJhbmdlID0gTWF0Y2hSYW5nZVxyXG4gICAgdGhpcy5TdGFydCA9IFN0YXJ0XHJcbiAgICB0aGlzLkVuZCA9IEVuZFxyXG4gICAgdGhpcy5FbmNyeXB0aW9uID0gRW5jcnlwdGlvblxyXG4gIH1cclxuXHJcbiAgdmFsaWRhdGUoKSB7XHJcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKHRoaXMuQnVja2V0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgU291cmNlIGJ1Y2tldCBuYW1lOiAnICsgdGhpcy5CdWNrZXQpXHJcbiAgICB9XHJcbiAgICBpZiAoIWlzVmFsaWRPYmplY3ROYW1lKHRoaXMuT2JqZWN0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRPYmplY3ROYW1lRXJyb3IoYEludmFsaWQgU291cmNlIG9iamVjdCBuYW1lOiAke3RoaXMuT2JqZWN0fWApXHJcbiAgICB9XHJcbiAgICBpZiAoKHRoaXMuTWF0Y2hSYW5nZSAmJiB0aGlzLlN0YXJ0ICE9PSAtMSAmJiB0aGlzLkVuZCAhPT0gLTEgJiYgdGhpcy5TdGFydCA+IHRoaXMuRW5kKSB8fCB0aGlzLlN0YXJ0IDwgMCkge1xyXG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRPYmplY3ROYW1lRXJyb3IoJ1NvdXJjZSBzdGFydCBtdXN0IGJlIG5vbi1uZWdhdGl2ZSwgYW5kIHN0YXJ0IG11c3QgYmUgYXQgbW9zdCBlbmQuJylcclxuICAgIH0gZWxzZSBpZiAoKHRoaXMuTWF0Y2hSYW5nZSAmJiAhaXNOdW1iZXIodGhpcy5TdGFydCkpIHx8ICFpc051bWJlcih0aGlzLkVuZCkpIHtcclxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKFxyXG4gICAgICAgICdNYXRjaFJhbmdlIGlzIHNwZWNpZmllZC4gQnV0IEludmFsaWQgU3RhcnQgYW5kIEVuZCB2YWx1ZXMgYXJlIHNwZWNpZmllZC4nLFxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIGdldEhlYWRlcnMoKTogUmVxdWVzdEhlYWRlcnMge1xyXG4gICAgY29uc3QgaGVhZGVyT3B0aW9uczogUmVxdWVzdEhlYWRlcnMgPSB7fVxyXG4gICAgaGVhZGVyT3B0aW9uc1sneC1hbXotY29weS1zb3VyY2UnXSA9IGVuY29kZVVSSSh0aGlzLkJ1Y2tldCArICcvJyArIHRoaXMuT2JqZWN0KVxyXG5cclxuICAgIGlmICghaXNFbXB0eSh0aGlzLlZlcnNpb25JRCkpIHtcclxuICAgICAgaGVhZGVyT3B0aW9uc1sneC1hbXotY29weS1zb3VyY2UnXSA9IGAke2VuY29kZVVSSSh0aGlzLkJ1Y2tldCArICcvJyArIHRoaXMuT2JqZWN0KX0/dmVyc2lvbklkPSR7dGhpcy5WZXJzaW9uSUR9YFxyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNFbXB0eSh0aGlzLk1hdGNoRVRhZykpIHtcclxuICAgICAgaGVhZGVyT3B0aW9uc1sneC1hbXotY29weS1zb3VyY2UtaWYtbWF0Y2gnXSA9IHRoaXMuTWF0Y2hFVGFnXHJcbiAgICB9XHJcbiAgICBpZiAoIWlzRW1wdHkodGhpcy5Ob01hdGNoRVRhZykpIHtcclxuICAgICAgaGVhZGVyT3B0aW9uc1sneC1hbXotY29weS1zb3VyY2UtaWYtbm9uZS1tYXRjaCddID0gdGhpcy5Ob01hdGNoRVRhZ1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNFbXB0eSh0aGlzLk1hdGNoTW9kaWZpZWRTaW5jZSkpIHtcclxuICAgICAgaGVhZGVyT3B0aW9uc1sneC1hbXotY29weS1zb3VyY2UtaWYtbW9kaWZpZWQtc2luY2UnXSA9IHRoaXMuTWF0Y2hNb2RpZmllZFNpbmNlXHJcbiAgICB9XHJcbiAgICBpZiAoIWlzRW1wdHkodGhpcy5NYXRjaFVubW9kaWZpZWRTaW5jZSkpIHtcclxuICAgICAgaGVhZGVyT3B0aW9uc1sneC1hbXotY29weS1zb3VyY2UtaWYtdW5tb2RpZmllZC1zaW5jZSddID0gdGhpcy5NYXRjaFVubW9kaWZpZWRTaW5jZVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBoZWFkZXJPcHRpb25zXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgdXNlIG5vZGVqcyBmcyBtb2R1bGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVEaXJBbmRGaWxlcyhkaXJQYXRoOiBzdHJpbmcsIHJlbW92ZVNlbGYgPSB0cnVlKSB7XHJcbiAgaWYgKHJlbW92ZVNlbGYpIHtcclxuICAgIHJldHVybiBmcy5ybVN5bmMoZGlyUGF0aCwgeyByZWN1cnNpdmU6IHRydWUsIGZvcmNlOiB0cnVlIH0pXHJcbiAgfVxyXG5cclxuICBmcy5yZWFkZGlyU3luYyhkaXJQYXRoKS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICBmcy5ybVN5bmMocGF0aC5qb2luKGRpclBhdGgsIGl0ZW0pLCB7IHJlY3Vyc2l2ZTogdHJ1ZSwgZm9yY2U6IHRydWUgfSlcclxuICB9KVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElDb3B5RGVzdGluYXRpb25PcHRpb25zIHtcclxuICAvKipcclxuICAgKiBCdWNrZXQgbmFtZVxyXG4gICAqL1xyXG4gIEJ1Y2tldDogc3RyaW5nXHJcbiAgLyoqXHJcbiAgICogT2JqZWN0IE5hbWUgZm9yIHRoZSBkZXN0aW5hdGlvbiAoY29tcG9zZWQvY29waWVkKSBvYmplY3QgZGVmYXVsdHNcclxuICAgKi9cclxuICBPYmplY3Q6IHN0cmluZ1xyXG4gIC8qKlxyXG4gICAqIEVuY3J5cHRpb24gY29uZmlndXJhdGlvbiBkZWZhdWx0cyB0byB7fVxyXG4gICAqIEBkZWZhdWx0IHt9XHJcbiAgICovXHJcbiAgRW5jcnlwdGlvbj86IEVuY3J5cHRpb25cclxuICBVc2VyTWV0YWRhdGE/OiBPYmplY3RNZXRhRGF0YVxyXG4gIC8qKlxyXG4gICAqIHF1ZXJ5LXN0cmluZyBlbmNvZGVkIHN0cmluZyBvciBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IE9iamVjdFxyXG4gICAqL1xyXG4gIFVzZXJUYWdzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHN0cmluZ1xyXG4gIExlZ2FsSG9sZD86ICdvbicgfCAnb2ZmJ1xyXG4gIC8qKlxyXG4gICAqIFVUQyBEYXRlIFN0cmluZ1xyXG4gICAqL1xyXG4gIFJldGFpblVudGlsRGF0ZT86IHN0cmluZ1xyXG4gIE1vZGU/OiBSRVRFTlRJT05fTU9ERVNcclxuICBNZXRhZGF0YURpcmVjdGl2ZT86ICdDT1BZJyB8ICdSRVBMQUNFJ1xyXG4gIC8qKlxyXG4gICAqIEV4dHJhIGhlYWRlcnMgZm9yIHRoZSB0YXJnZXQgb2JqZWN0XHJcbiAgICovXHJcbiAgSGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvcHlEZXN0aW5hdGlvbk9wdGlvbnMge1xyXG4gIHB1YmxpYyByZWFkb25seSBCdWNrZXQ6IHN0cmluZ1xyXG4gIHB1YmxpYyByZWFkb25seSBPYmplY3Q6IHN0cmluZ1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgRW5jcnlwdGlvbj86IEVuY3J5cHRpb25cclxuICBwcml2YXRlIHJlYWRvbmx5IFVzZXJNZXRhZGF0YT86IE9iamVjdE1ldGFEYXRhXHJcbiAgcHJpdmF0ZSByZWFkb25seSBVc2VyVGFncz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCBzdHJpbmdcclxuICBwcml2YXRlIHJlYWRvbmx5IExlZ2FsSG9sZD86ICdvbicgfCAnb2ZmJ1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgUmV0YWluVW50aWxEYXRlPzogc3RyaW5nXHJcbiAgcHJpdmF0ZSByZWFkb25seSBNb2RlPzogUkVURU5USU9OX01PREVTXHJcbiAgcHJpdmF0ZSByZWFkb25seSBNZXRhZGF0YURpcmVjdGl2ZT86IHN0cmluZ1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgSGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cclxuXHJcbiAgY29uc3RydWN0b3Ioe1xyXG4gICAgQnVja2V0LFxyXG4gICAgT2JqZWN0LFxyXG4gICAgRW5jcnlwdGlvbixcclxuICAgIFVzZXJNZXRhZGF0YSxcclxuICAgIFVzZXJUYWdzLFxyXG4gICAgTGVnYWxIb2xkLFxyXG4gICAgUmV0YWluVW50aWxEYXRlLFxyXG4gICAgTW9kZSxcclxuICAgIE1ldGFkYXRhRGlyZWN0aXZlLFxyXG4gICAgSGVhZGVycyxcclxuICB9OiBJQ29weURlc3RpbmF0aW9uT3B0aW9ucykge1xyXG4gICAgdGhpcy5CdWNrZXQgPSBCdWNrZXRcclxuICAgIHRoaXMuT2JqZWN0ID0gT2JqZWN0XHJcbiAgICB0aGlzLkVuY3J5cHRpb24gPSBFbmNyeXB0aW9uID8/IHVuZGVmaW5lZCAvLyBudWxsIGlucHV0IHdpbGwgYmVjb21lIHVuZGVmaW5lZCwgZWFzeSBmb3IgcnVudGltZSBhc3NlcnRcclxuICAgIHRoaXMuVXNlck1ldGFkYXRhID0gVXNlck1ldGFkYXRhXHJcbiAgICB0aGlzLlVzZXJUYWdzID0gVXNlclRhZ3NcclxuICAgIHRoaXMuTGVnYWxIb2xkID0gTGVnYWxIb2xkXHJcbiAgICB0aGlzLk1vZGUgPSBNb2RlIC8vIHJldGVudGlvbiBtb2RlXHJcbiAgICB0aGlzLlJldGFpblVudGlsRGF0ZSA9IFJldGFpblVudGlsRGF0ZVxyXG4gICAgdGhpcy5NZXRhZGF0YURpcmVjdGl2ZSA9IE1ldGFkYXRhRGlyZWN0aXZlXHJcbiAgICB0aGlzLkhlYWRlcnMgPSBIZWFkZXJzXHJcbiAgfVxyXG5cclxuICBnZXRIZWFkZXJzKCk6IFJlcXVlc3RIZWFkZXJzIHtcclxuICAgIGNvbnN0IHJlcGxhY2VEaXJlY3RpdmUgPSAnUkVQTEFDRSdcclxuICAgIGNvbnN0IGhlYWRlck9wdGlvbnM6IFJlcXVlc3RIZWFkZXJzID0ge31cclxuXHJcbiAgICBjb25zdCB1c2VyVGFncyA9IHRoaXMuVXNlclRhZ3NcclxuICAgIGlmICghaXNFbXB0eSh1c2VyVGFncykpIHtcclxuICAgICAgaGVhZGVyT3B0aW9uc1snWC1BbXotVGFnZ2luZy1EaXJlY3RpdmUnXSA9IHJlcGxhY2VEaXJlY3RpdmVcclxuICAgICAgaGVhZGVyT3B0aW9uc1snWC1BbXotVGFnZ2luZyddID0gaXNPYmplY3QodXNlclRhZ3MpXHJcbiAgICAgICAgPyBxdWVyeXN0cmluZy5zdHJpbmdpZnkodXNlclRhZ3MpXHJcbiAgICAgICAgOiBpc1N0cmluZyh1c2VyVGFncylcclxuICAgICAgICA/IHVzZXJUYWdzXHJcbiAgICAgICAgOiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLk1vZGUpIHtcclxuICAgICAgaGVhZGVyT3B0aW9uc1snWC1BbXotT2JqZWN0LUxvY2stTW9kZSddID0gdGhpcy5Nb2RlIC8vIEdPVkVSTkFOQ0Ugb3IgQ09NUExJQU5DRVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLlJldGFpblVudGlsRGF0ZSkge1xyXG4gICAgICBoZWFkZXJPcHRpb25zWydYLUFtei1PYmplY3QtTG9jay1SZXRhaW4tVW50aWwtRGF0ZSddID0gdGhpcy5SZXRhaW5VbnRpbERhdGUgLy8gbmVlZHMgdG8gYmUgVVRDLlxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLkxlZ2FsSG9sZCkge1xyXG4gICAgICBoZWFkZXJPcHRpb25zWydYLUFtei1PYmplY3QtTG9jay1MZWdhbC1Ib2xkJ10gPSB0aGlzLkxlZ2FsSG9sZCAvLyBPTiBvciBPRkZcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5Vc2VyTWV0YWRhdGEpIHtcclxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5Vc2VyTWV0YWRhdGEpKSB7XHJcbiAgICAgICAgaGVhZGVyT3B0aW9uc1tgWC1BbXotTWV0YS0ke2tleX1gXSA9IHZhbHVlLnRvU3RyaW5nKClcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLk1ldGFkYXRhRGlyZWN0aXZlKSB7XHJcbiAgICAgIGhlYWRlck9wdGlvbnNbYFgtQW16LU1ldGFkYXRhLURpcmVjdGl2ZWBdID0gdGhpcy5NZXRhZGF0YURpcmVjdGl2ZVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLkVuY3J5cHRpb24pIHtcclxuICAgICAgY29uc3QgZW5jcnlwdGlvbkhlYWRlcnMgPSBnZXRFbmNyeXB0aW9uSGVhZGVycyh0aGlzLkVuY3J5cHRpb24pXHJcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGVuY3J5cHRpb25IZWFkZXJzKSkge1xyXG4gICAgICAgIGhlYWRlck9wdGlvbnNba2V5XSA9IHZhbHVlXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLkhlYWRlcnMpIHtcclxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5IZWFkZXJzKSkge1xyXG4gICAgICAgIGhlYWRlck9wdGlvbnNba2V5XSA9IHZhbHVlXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaGVhZGVyT3B0aW9uc1xyXG4gIH1cclxuXHJcbiAgdmFsaWRhdGUoKSB7XHJcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKHRoaXMuQnVja2V0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgRGVzdGluYXRpb24gYnVja2V0IG5hbWU6ICcgKyB0aGlzLkJ1Y2tldClcclxuICAgIH1cclxuICAgIGlmICghaXNWYWxpZE9iamVjdE5hbWUodGhpcy5PYmplY3QpKSB7XHJcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE9iamVjdE5hbWVFcnJvcihgSW52YWxpZCBEZXN0aW5hdGlvbiBvYmplY3QgbmFtZTogJHt0aGlzLk9iamVjdH1gKVxyXG4gICAgfVxyXG4gICAgaWYgKCFpc0VtcHR5KHRoaXMuVXNlck1ldGFkYXRhKSAmJiAhaXNPYmplY3QodGhpcy5Vc2VyTWV0YWRhdGEpKSB7XHJcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE9iamVjdE5hbWVFcnJvcihgRGVzdGluYXRpb24gVXNlck1ldGFkYXRhIHNob3VsZCBiZSBhbiBvYmplY3Qgd2l0aCBrZXkgdmFsdWUgcGFpcnNgKVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNFbXB0eSh0aGlzLk1vZGUpICYmICFbUkVURU5USU9OX01PREVTLkdPVkVSTkFOQ0UsIFJFVEVOVElPTl9NT0RFUy5DT01QTElBTkNFXS5pbmNsdWRlcyh0aGlzLk1vZGUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE9iamVjdE5hbWVFcnJvcihcclxuICAgICAgICBgSW52YWxpZCBNb2RlIHNwZWNpZmllZCBmb3IgZGVzdGluYXRpb24gb2JqZWN0IGl0IHNob3VsZCBiZSBvbmUgb2YgW0dPVkVSTkFOQ0UsQ09NUExJQU5DRV1gLFxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuRW5jcnlwdGlvbiAhPT0gdW5kZWZpbmVkICYmIGlzRW1wdHlPYmplY3QodGhpcy5FbmNyeXB0aW9uKSkge1xyXG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRPYmplY3ROYW1lRXJyb3IoYEludmFsaWQgRW5jcnlwdGlvbiBjb25maWd1cmF0aW9uIGZvciBkZXN0aW5hdGlvbiBvYmplY3QgYClcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogbWF5YmUgdGhpcyBzaG91bGQgYmUgYSBnZW5lcmljIHR5cGUgZm9yIFJlY29yZHMsIGxlYXZlIGl0IGZvciBsYXRlciByZWZhY3RvclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNlbGVjdFJlc3VsdHMge1xyXG4gIHByaXZhdGUgcmVjb3Jkcz86IHVua25vd25cclxuICBwcml2YXRlIHJlc3BvbnNlPzogdW5rbm93blxyXG4gIHByaXZhdGUgc3RhdHM/OiBzdHJpbmdcclxuICBwcml2YXRlIHByb2dyZXNzPzogdW5rbm93blxyXG5cclxuICBjb25zdHJ1Y3Rvcih7XHJcbiAgICByZWNvcmRzLCAvLyBwYXJzZWQgZGF0YSBhcyBzdHJlYW1cclxuICAgIHJlc3BvbnNlLCAvLyBvcmlnaW5hbCByZXNwb25zZSBzdHJlYW1cclxuICAgIHN0YXRzLCAvLyBzdGF0cyBhcyB4bWxcclxuICAgIHByb2dyZXNzLCAvLyBzdGF0cyBhcyB4bWxcclxuICB9OiB7XHJcbiAgICByZWNvcmRzPzogdW5rbm93blxyXG4gICAgcmVzcG9uc2U/OiB1bmtub3duXHJcbiAgICBzdGF0cz86IHN0cmluZ1xyXG4gICAgcHJvZ3Jlc3M/OiB1bmtub3duXHJcbiAgfSkge1xyXG4gICAgdGhpcy5yZWNvcmRzID0gcmVjb3Jkc1xyXG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlXHJcbiAgICB0aGlzLnN0YXRzID0gc3RhdHNcclxuICAgIHRoaXMucHJvZ3Jlc3MgPSBwcm9ncmVzc1xyXG4gIH1cclxuXHJcbiAgc2V0U3RhdHMoc3RhdHM6IHN0cmluZykge1xyXG4gICAgdGhpcy5zdGF0cyA9IHN0YXRzXHJcbiAgfVxyXG5cclxuICBnZXRTdGF0cygpIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRzXHJcbiAgfVxyXG5cclxuICBzZXRQcm9ncmVzcyhwcm9ncmVzczogdW5rbm93bikge1xyXG4gICAgdGhpcy5wcm9ncmVzcyA9IHByb2dyZXNzXHJcbiAgfVxyXG5cclxuICBnZXRQcm9ncmVzcygpIHtcclxuICAgIHJldHVybiB0aGlzLnByb2dyZXNzXHJcbiAgfVxyXG5cclxuICBzZXRSZXNwb25zZShyZXNwb25zZTogdW5rbm93bikge1xyXG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlXHJcbiAgfVxyXG5cclxuICBnZXRSZXNwb25zZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnJlc3BvbnNlXHJcbiAgfVxyXG5cclxuICBzZXRSZWNvcmRzKHJlY29yZHM6IHVua25vd24pIHtcclxuICAgIHRoaXMucmVjb3JkcyA9IHJlY29yZHNcclxuICB9XHJcblxyXG4gIGdldFJlY29yZHMoKTogdW5rbm93biB7XHJcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRzXHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsRUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsSUFBQSxHQUFBRix1QkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUUsV0FBQSxHQUFBSCx1QkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUcsTUFBQSxHQUFBSix1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksT0FBQSxHQUFBSixPQUFBO0FBV0EsSUFBQUssS0FBQSxHQUFBTCxPQUFBO0FBQW9ETSxPQUFBLENBQUFDLGVBQUEsR0FBQUYsS0FBQSxDQUFBRSxlQUFBO0FBQUFELE9BQUEsQ0FBQUUsZ0JBQUEsR0FBQUgsS0FBQSxDQUFBRyxnQkFBQTtBQUFBRixPQUFBLENBQUFHLGlCQUFBLEdBQUFKLEtBQUEsQ0FBQUksaUJBQUE7QUFBQUgsT0FBQSxDQUFBSSx3QkFBQSxHQUFBTCxLQUFBLENBQUFLLHdCQUFBO0FBQUEsU0FBQVgsd0JBQUFZLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixP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