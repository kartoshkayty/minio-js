"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
// nodejs IncomingHttpHeaders is Record<string, string | string[]>, but it's actually this:
let ENCRYPTION_TYPES = exports.ENCRYPTION_TYPES = /*#__PURE__*/function (ENCRYPTION_TYPES) {
  /**
   * SSEC represents server-side-encryption with customer provided keys
   */
  ENCRYPTION_TYPES["SSEC"] = "SSE-C";
  /**
   * KMS represents server-side-encryption with managed keys
   */
  ENCRYPTION_TYPES["KMS"] = "KMS";
  return ENCRYPTION_TYPES;
}({});
let RETENTION_MODES = exports.RETENTION_MODES = /*#__PURE__*/function (RETENTION_MODES) {
  RETENTION_MODES["GOVERNANCE"] = "GOVERNANCE";
  RETENTION_MODES["COMPLIANCE"] = "COMPLIANCE";
  return RETENTION_MODES;
}({});
let RETENTION_VALIDITY_UNITS = exports.RETENTION_VALIDITY_UNITS = /*#__PURE__*/function (RETENTION_VALIDITY_UNITS) {
  RETENTION_VALIDITY_UNITS["DAYS"] = "Days";
  RETENTION_VALIDITY_UNITS["YEARS"] = "Years";
  return RETENTION_VALIDITY_UNITS;
}({});
let LEGAL_HOLD_STATUS = exports.LEGAL_HOLD_STATUS = /*#__PURE__*/function (LEGAL_HOLD_STATUS) {
  LEGAL_HOLD_STATUS["ENABLED"] = "ON";
  LEGAL_HOLD_STATUS["DISABLED"] = "OFF";
  return LEGAL_HOLD_STATUS;
}({});
/* Replication Config types */
/* Replication Config types */
/**
 * @deprecated keep for backward compatible, use `LEGAL_HOLD_STATUS` instead
 */
/** List object api types **/
// Common types
/** List object api types **/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,