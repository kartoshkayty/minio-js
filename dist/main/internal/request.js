"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.request = request;
exports.requestWithRetry = requestWithRetry;
var _stream = require("stream");
var _util = require("util");
const pipelineAsync = (0, _util.promisify)(_stream.pipeline);
async function request(transport, opt, body = null) {
  return new Promise((resolve, reject) => {
    const requestObj = transport.request(opt, response => {
      resolve(response);
    });
    requestObj.on('error', reject);
    if (!body || Buffer.isBuffer(body) || typeof body === 'string') {
      requestObj.end(body);
    } else {
      pipelineAsync(body, requestObj).catch(reject);
    }
  });
}
const MAX_RETRIES = 2;
const EXP_BACK_OFF_BASE_DELAY = 1000; // Base delay for exponential backoff
const ADDITIONAL_DELAY_FACTOR = 1.0; // to avoid synchronized retries

// Retryable error codes for HTTP ( ref: minio-go)
const retryHttpCodes = exports.retryHttpCodes = {
  408: true,
  429: true,
  499: true,
  500: true,
  502: true,
  503: true,
  504: true,
  520: true
};
const isHttpRetryable = httpResCode => {
  return retryHttpCodes[httpResCode] !== undefined;
};
const sleep = ms => {
  return new Promise(resolve => setTimeout(resolve, ms));
};
const getExpBackOffDelay = retryCount => {
  const backOffBy = EXP_BACK_OFF_BASE_DELAY * 2 ** retryCount;
  const additionalDelay = Math.random() * backOffBy * ADDITIONAL_DELAY_FACTOR;
  return backOffBy + additionalDelay;
};
async function requestWithRetry(transport, opt, body = null, maxRetries = MAX_RETRIES) {
  let attempt = 0;
  let isRetryable = false;
  while (attempt <= maxRetries) {
    try {
      const response = await request(transport, opt, body);
      // Check if the HTTP status code is retryable
      if (isHttpRetryable(response.statusCode)) {
        isRetryable = true;
        throw new Error(`Retryable HTTP status: ${response.statusCode}`); // trigger retry attempt with calculated delay
      }
      return response; // Success, return the raw response
    } catch (err) {
      if (isRetryable) {
        attempt++;
        isRetryable = false;
        if (attempt > maxRetries) {
          throw new Error(`Request failed after ${maxRetries} retries: ${err}`);
        }
        const delay = getExpBackOffDelay(attempt);
        // eslint-disable-next-line no-console
        console.warn(`${new Date().toLocaleString()} Retrying request (attempt ${attempt}/${maxRetries}) after ${delay}ms due to: ${err}`);
        await sleep(delay);
      } else {
        throw err; // re-throw if any request, syntax errors
      }
    }
  }
  throw new Error(`${MAX_RETRIES} Retries exhausted, request failed.`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,